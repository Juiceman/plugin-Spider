// -< CodeGenerator.java >--------------------------------------------*--------*
// JSQL Version 1.04 (c) 1999 GARRET * ? *
// (Java SQL) * /\| *
// * / \ *
// Created: 23-Mar-2009 K.A. Knizhnik * / [] \ *
// Last update: 23-Mar-2009 K.A. Knizhnik * GARRET *
// -------------------------------------------------------------------*--------*
// JQSL query generator
// -------------------------------------------------------------------*--------*

package org.garret.perst;

/**
 * Code generator for JSQL queries.
 */
public interface CodeGenerator {
  /**
   * Class representing abstract syntax tree generated by query code generator
   */
  public interface Code {
  }

  Code abs(Code expr);

  Code acos(Code expr);

  Code add(Code left, Code right);

  Code and(Code left, Code right);

  Code asin(Code expr);

  Code atan(Code expr);

  Code between(Code expr, Code low, Code high);

  Code ceil(Code expr);

  Code cos(Code expr);

  Code div(Code left, Code right);

  Code eq(Code left, Code right);

  Code exp(Code expr);

  /**
   * Get field
   * 
   * @param base target object
   * @param name field name
   */
  Code field(Code base, String name);

  /**
   * Get self field
   * 
   * @param name field name
   */
  Code field(String name);

  Code floor(Code expr);

  Code ge(Code left, Code right);

  /**
   * Get array element
   */
  Code getAt(Code array, Code index);

  Code gt(Code left, Code right);

  Code in(Code expr, Code set);

  /**
   * Convert real to integer
   */
  Code integer(Code expr);

  /**
   * Invoke method
   * 
   * @param base invocation target
   * @param name method name
   * @param arguments method arguments
   */
  Code invoke(Code base, String name, Code... arguments);

  /**
   * Invoke self method
   * 
   * @param name method name
   * @param arguments method arguments
   */
  Code invoke(String name, Code[] arguments);

  Code le(Code left, Code right);

  /**
   * Get array length
   */
  Code length(Code expr);

  Code like(Code expr, Code pattern);

  Code like(Code expr, Code pattern, Code esc);

  /**
   * List of alternatives for IN operator
   */
  Code list(Code... values);

  /**
   * Literal constant
   */
  Code literal(Object value);

  Code log(Code expr);

  /**
   * Convert string to lower case
   */
  Code lower(Code expr);

  Code lt(Code left, Code right);

  Code mul(Code left, Code right);

  Code ne(Code left, Code right);

  Code neg(Code expr);

  Code not(Code expr);

  Code or(Code left, Code right);

  /**
   * Add order by clause. It is possible to invoke this method several times - in this case result
   * will be sorted by all specified fields in the correspondent order
   * 
   * @param name field name by which sort should be performed
   */
  void orderBy(String name);

  /**
   * Add order by clause. It is possible to invoke this method several times - in this case result
   * will be sorted by all specified fields in the correspondent order
   * 
   * @param name field name by which sort should be performed
   * @param ascent true for ascent order, false for descent order
   */
  void orderBy(String name, boolean ascent);

  /**
   * Query parameter
   * 
   * @param n parameter index (0 based)
   * @param type parameter type
   */
  Code parameter(int n, Class type);

  Code pow(Code left, Code right);

  /**
   * Set query predicate code
   * 
   * @param code AST constructed using CodeGenerator methods
   */
  void predicate(Code code);

  /**
   * Convert integer to real
   */
  Code real(Code expr);

  Code sin(Code expr);

  Code sqrt(Code expr);

  /**
   * Convert integer/real/date to string
   */
  Code string(Code expr);

  Code sub(Code left, Code right);

  Code tan(Code expr);

  /**
   * Convert string to upper case
   */
  Code upper(Code expr);
}
